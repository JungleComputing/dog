package ibis.mbf.client.gui;

import ibis.mbf.client.ServerData;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedList;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTextField;

class ConnectComponent extends JComponent implements ActionListener {

    // Generated by eclipse
    private static final long serialVersionUID = 516257666549160945L;

    public static final String CONNECT			= "Connect";
	public static final String DISCONNECT		= "Disconnect";
	public static final String NOT_AVAILABLE	= "not available";

	private JLabel label;
	private JTextField text;
	private JButton	button;
    private ServerData server;
    
	private	final GridBagConstraints constraints = new GridBagConstraints();
	
    private final LinkedList<ConnectComponentListener> listeners = 
        new LinkedList<ConnectComponentListener>();
	
    private boolean connected = false;

	public ConnectComponent(String labelText) {
		label = new JLabel(labelText);
		text = new JTextField(NOT_AVAILABLE);
		button = new JButton(CONNECT);

		label.setPreferredSize(new Dimension(60, 20));
		text.setPreferredSize(new Dimension(200, 20));
		button.setPreferredSize(new Dimension(100, 20));

		setLayout(new GridBagLayout());

		constraints.anchor = GridBagConstraints.WEST;
		constraints.fill = GridBagConstraints.BOTH;
		addGB(label, 0, 0, 1, 1, 0.05, 1.0);
		addGB(text, 1, 0, 1, 1, 0.90, 1.0);
		constraints.insets = new Insets(0, 10, 0, 0);
		addGB(button, 2, 0, 1, 1, 0.05, 1.0);

		button.addActionListener(this);
	}

	public String getText() {
		return text.getText();
	}

    public synchronized void setServer(ServerData server) { 
        this.server = server;

        if (server == null) { 
            text.setText(NOT_AVAILABLE);
            button.setText(CONNECT);
            connected = false;
        } else { 
            text.setText(server.getName());
        
            if (server.isConnected()) { 
                button.setText(DISCONNECT);
                connected = true;
            } else { 
                button.setText(CONNECT);
                connected = false;
            }
        }
    }

    public synchronized  ServerData getServer() {
        return server;
    }

	public synchronized void addConnectCompListener(ConnectComponentListener l) {
		listeners.add(l);
	}

	public synchronized void removeConnectCompListener(ConnectComponentListener l) {
		listeners.remove(l);
	}

	public void actionPerformed(ActionEvent e) {
        
		if (e.getSource() == button) {
			ConnectComponentEvent cce = null;
			
            // TODO: Not sure if this is thread safe ?? Can you have multiple 
            // calls to this method ?
            connected = !connected;

			if (connected) {
				cce = new ConnectComponentEvent(this, CONNECT);
				button.setText(DISCONNECT);
			} else {
				cce = new ConnectComponentEvent(this, DISCONNECT);
				button.setText(CONNECT);
			}

            ConnectComponentListener [] list;
            
			synchronized (this) {
			    list = listeners.toArray(new ConnectComponentListener[listeners.size()]);
			}

            for (ConnectComponentListener c : list) {
				c.connectButtonPressed(cce);
			}
		}
	}

	private void addGB(Component component, int x, int y, int w, int h, 
            double wx, double wy) {
		constraints.gridx = x;
		constraints.gridy = y;
		constraints.gridwidth = w;
		constraints.gridheight= h;
		constraints.weightx = wx;
		constraints.weighty = wy;
		add(component, constraints);
	}
}
