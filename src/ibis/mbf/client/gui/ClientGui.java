package ibis.mbf.client.gui;

import ibis.mbf.client.Client;
import ibis.mbf.client.ClientListener;
import ibis.mbf.client.ServerData;
import ibis.mbf.shared.Request;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.Arrays;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;


class ClientGui extends JComponent
				implements ClientWindowListener, ActionListener,
				ConnectComponentListener, ClientListener
{  
    // Generated by eclipse
    private static final long serialVersionUID = -7209590532678700377L;

    public static final int NR_SERVERS = 3;
	
    private static final String REC = "Recognition";
    private static final String LAB = "Labeling";
    private static final String DUM = "Dummy Operation";
    
	private transient Client client;
    private transient Voice myVoice;
    
    private	GridBagConstraints	gbc = new GridBagConstraints();
	
    private	MediaPanel    inPane;
	private MediaPanel [] outPanes = new MediaPanel[NR_SERVERS];
    
	private JComboBox operation =
						new JComboBox(new String[] { REC, LAB, DUM });
    
    private	JButton	learnButton = new JButton("Learn");
	private	JButton	recButton = new JButton("Recognize");
    
	private ConnectComponent [] cons = new ConnectComponent[NR_SERVERS];
	private JTextArea			txtArea = new JTextArea("Ready...\n");

	private JTextField			frameNr   = new JTextField("");
	private JTextField			frameRate = new JTextField("");
	private JTextField			objField  = new JTextField("");

    private long [] startTime = new long[4]; 
    private int [] rate = new int[4];
    

    public ClientGui(ClientWindow window)
	{
        initVoice();

		// Video viewing areas & MM Service Connection Control areas
		inPane = new MediaPanel();
		
        for (int i=0; i<NR_SERVERS; i++) {
			outPanes[i] = new MediaPanel();
			cons[i] = new ConnectComponent("Server " + i + ":");
		}

		// Text output area
		txtArea.setLineWrap(true);
		txtArea.setWrapStyleWord(true);

        JScrollPane txtScroll = new JScrollPane(txtArea,
							JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
							JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
							txtArea.setEditable(false);
		txtScroll.setPreferredSize(new Dimension(480, 113));


		// MultimediaN and Ibis Inside Logos
		ImageIcon iconMN   = new ImageIcon("Images/MultimediaN.gif");
		ImageIcon iconIbis = new ImageIcon("Images/Ibis-inside.gif");
		JLabel imMN = new JLabel(iconMN);
		JLabel imIbis = new JLabel(iconIbis);
		imMN.setBorder(BorderFactory.createLineBorder(Color.gray, 1));
		imIbis.setBorder(BorderFactory.createLineBorder(Color.gray, 1));

//		JButton	b2 = new JButton("Dummy 2");
        //JButton b3 = new JButton("Dummy 3");
		
		// Create Layout and add Components
		setLayout(new GridBagLayout());
		gbc.anchor = GridBagConstraints.NORTHWEST;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = new Insets(10, 10, 10, 10);

		addGB(inPane,	   0, 0, 3, 1, 0.5, 0.33);
		addGB(outPanes[0], 3, 0, 3, 1, 0.5, 0.33);
		addGB(outPanes[1], 0, 1, 3, 1, 0.5, 0.33);
		addGB(outPanes[2], 3, 1, 3, 1, 0.5, 0.33);

	    addGB(operation,   0, 2, 1, 1, 0.5, 0.01);
        addGB(learnButton, 2, 2, 1, 1, 0.25, 0.01);
        addGB(recButton,   3, 2, 1, 1, 0.25, 0.01);

		addGB(cons[0],    0, 3, 3, 1, 0.5, 0.01);
		addGB(frameNr,    3, 3, 3, 1, 0.5, 0.01);
		addGB(cons[1],    0, 4, 3, 1, 0.5, 0.01);
		addGB(frameRate,  3, 4, 3, 1, 0.5, 0.01);
		addGB(cons[2],    0, 5, 3, 1, 0.5, 0.01);
		addGB(objField,   3, 5, 3, 1, 0.5, 0.01);

		gbc.anchor = GridBagConstraints.CENTER;
		addGB(imMN,       0, 6, 1, 1, 0.10, 0.25);
		addGB(txtScroll,  1, 6, 4, 1, 0.80, 0.25);
		addGB(imIbis,     5, 6, 1, 1, 0.10, 0.25);

		// Register Listeners
		learnButton.addActionListener(this);
		recButton.addActionListener(this);
        operation.addActionListener(this);
        
		cons[0].addConnectCompListener(this);
		cons[1].addConnectCompListener(this);
		cons[2].addConnectCompListener(this);
		window.addClientWindowListener(this);
	}


    public void setClient(Client client)
	{
        this.client = client;
        client.registerListener(this);
    }
    
    private void addGB(Component component,
					   int x, int y, int w, int h, double wx, double wy)
	{
        gbc.gridx = x;
        gbc.gridy = y;
        gbc.gridwidth = w;
        gbc.gridheight= h;
        gbc.weightx = wx;
        gbc.weighty = wy;
        add(component, gbc);
    }


	private void initVoice()
	{
        try { 
		    System.out.println("Initializing speech synthesizer...");

		    String voiceName = "kevin16";
		    VoiceManager voiceManager = VoiceManager.getInstance();
		    myVoice = voiceManager.getVoice(voiceName);

		    if (myVoice == null) {
		        System.err.println("Can not find voice: " + voiceName);
		        return;
		    }

		    myVoice.allocate();

		    speak("Voice initialized!");
		} catch (Throwable e) { 
            System.err.println("Failed to init voice!");
            e.printStackTrace(System.err);
		}
	}


    /*
	private void exitVoice(Voice v) {
		v.deallocate();	
	}
    */

    private void speak(String text)
	{ 
        if (myVoice != null) { 
            myVoice.speak(text);
        }
        txtArea.append(text + "\n");
    }
    

	public void actionPerformed(ActionEvent e)
	{
		if (e.getSource() == operation) {
     
		    String selected = (String) operation.getSelectedItem();
            byte op = client.getCurrentOperation();

            if (selected.equals(REC)) { 
                if (op != Request.OPERATION_RECOGNISE) { 
                    System.err.println("Switching to REC");
                    learnButton.setEnabled(true);
                    recButton.setEnabled(true);
                    client.setCurrentOperation(Request.OPERATION_RECOGNISE);
                }
            } else if (selected.equals(LAB)) { 
                if (op != Request.OPERATION_LABELING) { 
                    System.err.println("Switching to LAB");
                    learnButton.setEnabled(false);
                    recButton.setEnabled(false);
                    client.setCurrentOperation(Request.OPERATION_LABELING);
                }
            } else if (selected.equals(DUM)) { 
                if (op != Request.OPERATION_DUMMY) { 
                    System.err.println("Switching to DUM");
                    learnButton.setEnabled(false);
                    recButton.setEnabled(false);
                    client.setCurrentOperation(Request.OPERATION_DUMMY);
				}
            } else { 
                System.err.println("Operation " +
											selected + " is unknown!!");
            }
		} else if (e.getSource() == learnButton) {
			String objName = objField.getText();
			if (objName.equals("")) {
				txtArea.append("Please enter object name first!\n");
				return;
			}
            txtArea.append("I will now learn: " + objName + "\n");
            boolean success = client.learn(objName);
            if (success) { 
                speak("I have just learned a new object called " +
															objName);
            } else {
                txtArea.append("I failed to learn object called " +
															objName);
            }
            
		} else if (e.getSource() == recButton) {
            String object = client.recognize();
            if (object != null) { 
                speak("This object is a " + object);
            } else {
                speak("I do not recognise this object");
            }
		}
	}


	public void clientWindowFileSelected(ClientWindowEvent e)
	{
		client.mediaSelected(e.getFileName());
	}


	public void connectButtonPressed(ConnectComponentEvent e)
	{
		for (int i=0; i<NR_SERVERS; i++) {
			if (e.getSource() == cons[i]) {
				//txtArea.append("Connect Button " + i + " pressed\n");
                if (cons[i].getServer() != null) {
                    client.serverConnected(cons[i].getServer(), 
					e.getCommand().equals(ConnectComponent.CONNECT));
                } 
			}
		}
	}


    public void updateServers(ServerData [] servers)
	{
        if (servers == null || servers.length == 0) { 
            for (int i=0; i<NR_SERVERS; i++) {
                if (cons[i] == null) { 
                    return;
                }
                cons[i].setServer(null);
            }
            return;            
        } 
        
        // Note that we try to maintain the original order here!
        // Thats why  it's so complicated
        boolean [] used = new boolean[NR_SERVERS];
        Arrays.fill(used, false);

        // First find out which servers are still used
        for (int s=0; s<servers.length; s++) {
            if (servers[s] != null) {
                for (int i=0; i<NR_SERVERS; i++) {
                    if (!used[i] && cons[i] != null) {
                        ServerData tmp = cons[i].getServer();
                        if (tmp != null &&
								tmp.serverID == servers[s].serverID) { 
                            used[i] = true;
                            servers[s] = null;
                            break;
                        }                            
                    }
                }
            }
        }

        // Remove all servers that have disappeared
        for (int i=0; i<NR_SERVERS; i++) {
            if (!used[i]) {
                if (cons[i].getServer() != null) { 
                    System.out.println("GUI REMOVING SERVER: " +
										cons[i].getServer().getName());
                    cons[i].setServer(null);
                }
            }
        }

        // Add any new servers that we have found
        for (int s=0; s<servers.length; s++) {

            if (servers[s] != null) { 
                // we have a new server, now find a spot...
                for (int i=0; i<NR_SERVERS; i++) {
                    if (!used[i]) {               
                        System.out.println("GUI ADDING SERVER: " +
												servers[s].getName());
                        cons[i].setServer(servers[s]);
                        used[i] = true;
                        break;
                    }                            
                }
            }
        }
    }


    public void updateFrame(byte [] pixels,
							int w, int h, int frame, int pane)
	{ 
        if (pane < 0 || pane > 4) { 
            return;
        }
        BufferedImage img =
				new BufferedImage(w, h, BufferedImage.TYPE_3BYTE_BGR);
        img.getRaster().setDataElements(0, 0, w, h, pixels);
        frameNr.setText("Frame-nr  = " + frame);

        // We print the FPS once every 100 frames.
        if (startTime[pane] == 0) { 
            // Set the start time once we get the first frame.
            startTime[pane] = System.currentTimeMillis();
        }
        
        if (frame % 100 == 0) {
            // Note that we can only calculate the FPS if we have seen
            // more than one frame. 
            if (frame > 0) { 
                long time = System.currentTimeMillis()-startTime[pane];
                rate[pane] = (int) ((100*1000) / time);
//				frameRate.setText("Frame-rate = " +
//											rate + " (" + time + ")");
            }

            // Reset the start time for the next measurement
            startTime[pane] = System.currentTimeMillis();
        } 

        // Write the fps in the image
        Graphics2D g = img.createGraphics(); 
        g.setColor(Color.BLACK);         
        g.drawString("fps = " + rate[pane], 10, 278);
        
        if (pane == 0) { 
            inPane.setMediaFrame(img); 
        } else { 
            outPanes[pane-1].setMediaFrame(img);
        }
    }
}
